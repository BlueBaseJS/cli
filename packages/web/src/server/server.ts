import { Server } from 'http';
import logger from '@bluebase/cli-core/lib/utils/logger';
import clientBundle from './middleware/clientBundle';
// import compression from 'compression';
// import errorHandlers from './middleware/errorHandlers';
import express from 'express';
// import offlinePage from './middleware/offlinePage';
import reactApplication from './middleware/reactApplication';
// import security from './middleware/security';
// import serviceWorker from './middleware/serviceWorker';
import { Flags } from '../cli-flags';
import { buildConfigsBundle1 } from '../helpers/buildConfigsBundle.1';

const server = (flags: Flags): Server => {

	const configs = buildConfigsBundle1(flags, {});

	// Create our express based server.
	const app = express();

	// Don't expose any software information to potential hackers.
	app.disable('x-powered-by');

	// // Security middlewares.
	// app.use(...security(configs));

	// // Gzip compress the responses.
	// app.use(compression());

	// // Register our service worker generated by our webpack config.
	// // We do not want the service worker registered for development builds, and
	// // additionally only want it registered if the config allows.
	const serviceWorkerConfigs = configs.serverConfigs.serviceWorker;
	// if (process.env.BUILD_FLAG_IS_DEV === 'false' && serviceWorkerConfigs.enabled) {
	// 	app.get(`/${serviceWorkerConfigs.fileName}`, serviceWorker(configs));
	// 	app.get(
	// 		`${configs.clientConfigs.publicPath}${serviceWorkerConfigs.offlinePageFileName}`,
	// 		offlinePage(configs),
	// 	);
	// }

	// Configure serving of our client bundle.
	if (configs.clientConfigs.publicPath) {
		app.use(configs.clientConfigs.publicPath, clientBundle(configs));
	}

	// Configure static serving of our "public" root http path static files.
	app.use(express.static(configs.assetsDirPath));

	// The React application middleware.
	app.get('*', (request, response) => {
		logger.log({
			label: '@bluebase/cli/server',
			level: 'info',
			message: `Received for "${request.url}"`,
		});
		return reactApplication(configs)(request, response);
	});

	// // Error Handler middlewares.
	// app.use(...errorHandlers);

	// Create an http listener for our express app.
	const listener = app.listen(configs.serverConfigs.port, () => {
		logger.log({
			label: '@bluebase/cli/server',
			level: 'info',
			// tslint:disable-next-line:object-literal-sort-keys
			message: `âœ“

			${configs.serverConfigs.welcomeMessage}

			${configs.clientConfigs.htmlPage.defaultTitle} is ready!

			with

			Service Workers: ${serviceWorkerConfigs.enabled}
			Server Side Rendering: ${!configs.serverConfigs.disableSSR}

			Server is now listening on Port ${configs.serverConfigs.port}
			You can access it in the browser at http://${configs.serverConfigs.host}:${configs.serverConfigs.port}
			Press Ctrl-C to stop.



		`,
		});
	});

	// We export the listener as it will be handy for our development hot reloader,
	// or for exposing a general extension layer for application customisations.
	return listener;
};

export default server;
