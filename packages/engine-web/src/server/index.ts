import { Engine } from '@blueeast/bluerain-cli-core';
import { Server } from 'http';
import { resolve as pathResolve } from 'path';
import clientBundle from './middleware/clientBundle';
import compression from 'compression';
import errorHandlers from './middleware/errorHandlers';
import express from 'express';
import fs from 'fs';
import logger from '../logger';
import offlinePage from './middleware/offlinePage';
import reactApplication from './middleware/reactApplication';
import security from './middleware/security';
import serviceWorker from './middleware/serviceWorker';

const server = async (engine: Engine): Promise<Server> => {

	const config = engine.Configs.get;

	// Create our express based server.
	const app = express();

	// Don't expose any software information to potential hackers.
	app.disable('x-powered-by');

	// Security middlewares.
	app.use(...security(config));

	// Gzip compress the responses.
	app.use(compression());

	// Register our service worker generated by our webpack config.
	// We do not want the service worker registered for development builds, and
	// additionally only want it registered if the config allows.
	if (process.env.BUILD_FLAG_IS_DEV === 'false' && config('serviceWorker.enabled')) {
		app.get(`/${config('serviceWorker.fileName')}`, serviceWorker(config));
		app.get(
			`${config('bundles.client.webPath')}${config('serviceWorker.offlinePageFileName')}`,
			offlinePage(config),
		);
	}

	// Configure serving of our client bundle.
	app.use(config('bundles.client.webPath'), clientBundle(config));

	// Configure static serving of our "public" root http path static files.
	// Note: these will be served off the root (i.e. '/') of our application.
	let publicPath = pathResolve(config('projectRootDir'), config('publicAssetsPath'));
	const customPublicPath = pathResolve('public');

	if (!fs.existsSync(customPublicPath)) {
		logger.info('Public Folder', 'Using default public folder.');
	} else {
		logger.info('Public Folder', 'Using custom public folder.');
		publicPath = customPublicPath;
	}

	app.use(express.static(publicPath));

	// The React application middleware.
	app.get('*', (request, response) => {
		logger.notice('Request', `Received for "${request.url}"`);
		return reactApplication(config)(request, response);
	});

	// Error Handler middlewares.
	app.use(...errorHandlers);

	// Create an http listener for our express app.
	const listener = app.listen(config('port'), () => {
		logger.notice('server', `âœ“

			${config('welcomeMessage')}

			${config('htmlPage.defaultTitle')} is ready!

			with

			Service Workers: ${config('serviceWorker.enabled')}
			Polyfills: ${config('polyfillIO.enabled')} (${config('polyfillIO.features').join(', ')})

			Server is now listening on Port ${config('port')}
			You can access it in the browser at http://${config('host')}:${config('port')}
			Press Ctrl-C to stop.



		`);
	});

	// We export the listener as it will be handy for our development hot reloader,
	// or for exposing a general extension layer for application customisations.
	return listener;
};

export default server;
