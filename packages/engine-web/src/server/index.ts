import { Server } from 'http';
import clientBundle from './middleware/clientBundle';
import compression from 'compression';
import errorHandlers from './middleware/errorHandlers';
import express from 'express';
import logger from '../logger';
import offlinePage from './middleware/offlinePage';
import reactApplication from './middleware/reactApplication';
import security from './middleware/security';
import serviceWorker from './middleware/serviceWorker';
import { PlatformConfigs } from '../engine';

const server = (configsBundle: PlatformConfigs & { publicAssetsPath: string }): Server => {

	const { publicAssetsPath, ...configs } = configsBundle;

	// Create our express based server.
	const app = express();

	// Don't expose any software information to potential hackers.
	app.disable('x-powered-by');

	// Security middlewares.
	app.use(...security(configs));

	// Gzip compress the responses.
	app.use(compression());

	// Register our service worker generated by our webpack config.
	// We do not want the service worker registered for development builds, and
	// additionally only want it registered if the config allows.
	if (process.env.BUILD_FLAG_IS_DEV === 'false' && configs.serviceWorker.enabled) {
		app.get(`/${configs.serviceWorker.fileName}`, serviceWorker(configs));
		app.get(
			`${configs.bundles.client.webPath}${configs.serviceWorker.offlinePageFileName}`,
			offlinePage(configs),
		);
	}

	// Configure serving of our client bundle.
	app.use(configs.bundles.client.webPath, clientBundle(configs));

	// Configure static serving of our "public" root http path static files.
	app.use(express.static(publicAssetsPath));

	// The React application middleware.
	app.get('*', (request, response) => {
		logger.log({
			title: 'Request',
			level: 'info',
			message: `Received for "${request.url}"`,
		});
		return reactApplication(configs)(request, response);
	});

	// Error Handler middlewares.
	app.use(...errorHandlers);

	// Create an http listener for our express app.
	const listener = app.listen(configs.port, () => {
		logger.log({
			title: 'server',
			level: 'info',
			message: `âœ“

			${configs.welcomeMessage}

			${configs.htmlPage.defaultTitle} is ready!

			with

			Service Workers: ${configs.serviceWorker.enabled}

			Server is now listening on Port ${configs.port}
			You can access it in the browser at http://${configs.host}:${configs.port}
			Press Ctrl-C to stop.



		`,
		});
	});

	// We export the listener as it will be handy for our development hot reloader,
	// or for exposing a general extension layer for application customisations.
	return listener;
};

export default server;
