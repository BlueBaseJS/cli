{
  "name": "@bluebase/cli-expo",
  "description": "An Expo plugin for BlueBaseJS CLI",
  "version": "0.0.10",
  "main": "./lib",
  "author": "BlueEast Team <code@blueeast.com>",
  "bugs": "https://github.com/BlueBaseJS/cli/issues",
  "dependencies": {
    "@babel/core": "^7.3.4",
    "@babel/register": "^7.0.0",
    "@babel/runtime": "^7.3.4",
    "@bluebase/cli-core": "^0.0.13",
    "@oclif/command": "^1.5.8",
    "@oclif/config": "^1.12.9",
    "babel-preset-bluebase": "^2.3.0",
    "expo-cli": "^2.11.7",
    "rimraf": "^2.6.3",
    "semver": "^5.5.1",
    "shelljs": "^0.8.2",
    "tslib": "^1",
    "typescript": "^3.3.3333"
  },
  "devDependencies": {
    "@babel/cli": "^7.2.3",
    "@babel/node": "^7.2.2",
    "@babel/plugin-proposal-class-properties": "^7.3.4",
    "@babel/plugin-proposal-object-rest-spread": "^7.3.4",
    "@babel/plugin-transform-runtime": "^7.3.4",
    "@babel/preset-env": "^7.3.4",
    "@babel/preset-typescript": "^7.3.3",
    "@bluebase/code-standards": "^1.0.2",
    "@blueeast/tslint-config-blueeast": "^0.7.0",
    "@oclif/dev-cli": "^1.21.3",
    "@oclif/plugin-help": "^2.1.6",
    "@oclif/test": "^1.2.4",
    "@oclif/tslint": "^3.1.1",
    "@types/chai": "^4",
    "@types/expo": "^32.0.6",
    "@types/inquirer": "^0.0.44",
    "@types/mocha": "^5.2.6",
    "@types/node": "^11.11.0",
    "@types/react": "^16.8.7",
    "@types/rimraf": "^2.0.2",
    "@types/semver": "^5.5.0",
    "@types/shelljs": "^0.8.3",
    "chai": "^4",
    "expo": "^26.1.1",
    "mocha": "^6.0.2",
    "npm-run-all": "^4.1.3",
    "nyc": "^13.3.0",
    "tslint": "^5.13.1"
  },
  "peerDependencies": {
    "@blueeast/bluebase": "^3.*",
    "react": "^16.*"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "/lib",
    "/templates",
    "/npm-shrinkwrap.json",
    "/oclif.manifest.json",
    "/yarn.lock"
  ],
  "homepage": "https://github.com/BlueBaseJS/cli",
  "keywords": [
    "oclif-plugin"
  ],
  "license": "MIT",
  "oclif": {
    "commands": "./lib/commands",
    "bin": "bluebase",
    "devPlugins": [
      "@oclif/plugin-help"
    ]
  },
  "repository": "https://github.com/BlueBaseJS/cli",
  "scripts": {
    "postpack": "rm -f oclif.manifest.json npm-shrinkwrap.json",
    "posttest": "tsc -p test --noEmit && tslint -p test -t stylish",
    "prepack": "npm run build && oclif-dev manifest && oclif-dev readme && npm shrinkwrap",
    "prepare": "npm run build",
    "test:unit": "nyc mocha --forbid-only \"test/**/*.test.ts\"",
    "version": "oclif-dev readme && git add README.md",
    "start": "ts-node ./src/test.ts",
    "clean": "rimraf coverage lib tmp",
    "watch": "tsc -w -p tsconfig.json",
    "watch:test": "jest --watch",
    "lint": "tslint -t stylish --project \"tsconfig.json\"",
    "test:only": "jest --coverage",
    "info": "npm-scripts-info",
    "build": "run-s clean && run-p build:*",
    "build:main": "tsc -p tsconfig.json && babel ./src --out-dir lib --extensions \".ts,.tsx\"",
    "fix": "run-s fix:*",
    "fix:prettier": "prettier \"src/**/*.ts\" --write",
    "fix:tslint": "tslint --fix --project .",
    "test": "run-s build test:*",
    "test:lint": "npm run lint",
    "test:prettier": "prettier \"src/**/*.ts\" --list-different",
    "commit": "git-cz",
    "cov": "run-s build test:unit cov:html && opn coverage/index.html",
    "cov:html": "nyc report --reporter=html",
    "cov:send": "nyc report --reporter=lcov > coverage.lcov && codecov",
    "cov:check": "nyc report && nyc check-coverage --lines 100 --functions 100 --branches 100",
    "doc": "run-s doc:html && opn lib/docs/index.html",
    "doc:html": "typedoc src/ --target ES6 --mode file --out lib/docs",
    "doc:json": "typedoc src/ --target ES6 --mode file --json lib/docs/typedoc.json",
    "doc:publish": "gh-pages -m \"[ci skip] Updates\" -d lib/docs",
    "reset": "git clean -dfx && git reset --hard && npm i",
    "all": "run-s reset test cov:check doc:html",
    "prepare-release": "run-s all version doc:publish"
  },
  "scripts-info": {
    "info": "Display information about the package scripts",
    "build": "Clean and rebuild the project",
    "fix": "Try to automatically fix any linting problems",
    "test": "Lint and unit test the project",
    "watch": "Watch and rebuild the project on save",
    "cov": "Rebuild, run tests, then create and open the coverage report",
    "doc": "Generate HTML API documentation and open it in a browser",
    "doc:json": "Generate API documentation in typedoc JSON format",
    "version": "Bump package.json version, update CHANGELOG.md, tag release",
    "reset": "Delete all untracked files and reset the repo to the last commit",
    "prepare-release": "One-step: clean, build, test, publish docs, and prep a release"
  }
}
