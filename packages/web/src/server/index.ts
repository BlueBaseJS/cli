import { ConfigsBundle } from './types';
import { PathsBundle } from '../types';
import clientBundle from './middleware/clientBundle';
import compression from 'compression';
import customClientConfigs from 'CLIENT_CONFIG';
import customServerConfigs from 'SERVER_CONFIG';
import defaultClientConfigs from '../configFiles/client.config';
import defaultServerConfigs from '../configFiles/server.config';
import errorHandlers from './middleware/errorHandlers';
import express from 'express';
import { fromProjectRoot } from '@bluebase/cli-core/lib/utils/paths';
import fs from 'fs';
import logger from '@bluebase/cli-core/lib/utils/logger';
import reactApplication from './middleware/reactApplication';
import { resolvePaths } from '../helpers/resolvePaths';
import security from './middleware/security';

///////////////////////////
///// Load paths.json /////
///////////////////////////

const configsPath = fromProjectRoot('./build/web/server/paths.json');

if (!fs.existsSync(configsPath)) {
	throw new Error(
		`We could not find the "paths.json" file. Please ensure that the server bundle has been built.`
	);
}

const paths: PathsBundle = JSON.parse(fs.readFileSync(configsPath, 'utf8'));

////////////////////////////////
///// Build Configs Bundle /////
////////////////////////////////

// Client Configs
let clientConfigs = defaultClientConfigs({} as any, paths);
clientConfigs = customClientConfigs(clientConfigs, paths);

// Client Configs
let serverConfigs = defaultServerConfigs({} as any, paths);
serverConfigs = customServerConfigs(serverConfigs, paths);

///////////////////
///// Configs /////
///////////////////

const configs: ConfigsBundle = {
	...resolvePaths(paths),
	clientConfigs,
	serverConfigs,
};

//////////////////
///// Server /////
//////////////////

// Create our express based server.
const app = express();

// Don't expose any software information to potential hackers.
app.disable('x-powered-by');

// Security middlewares.
app.use(...security(configs));

// Gzip compress the responses.
app.use(compression());

// // Register our service worker generated by our webpack config.
// // We do not want the service worker registered for development builds, and
// // additionally only want it registered if the config allows.
// const serviceWorkerConfigs = serverConfigs.serviceWorker;
// if (process.env.BUILD_FLAG_IS_DEV === 'false' && serviceWorkerConfigs.enabled) {
// 	app.get(`/${serviceWorkerConfigs.fileName}`, serviceWorker(configs));
// 	app.get(
// 		`${clientConfigs.publicPath}${serviceWorkerConfigs.offlinePageFileName}`,
// 		offlinePage(configs),
// 	);
// }

// Configure serving of our client bundle.
if (clientConfigs.publicPath) {
	app.use(clientConfigs.publicPath, clientBundle(configs));
}

// Configure static serving of our "public" root http path static files.
app.use(express.static(configs.assetsDir));

// The React application middleware.
app.get('*', (request, response) => {
	logger.log({
		label: '@bluebase/cli/web',
		level: 'info',
		message: `Received for "${request.url}"`,
	});
	return reactApplication(configs)(request, response);
});

// Error Handler middlewares.
app.use(...errorHandlers);

// Create an http listener for our express app.
app.listen(serverConfigs.port, () => {
	logger.log({
		label: '@bluebase/cli/web',
		level: 'info',
		message: `âœ“

		${serverConfigs.welcomeMessage}

		${clientConfigs.htmlPage.defaultTitle} is ready!

		with

		Service Workers: ${serverConfigs.serviceWorker.enabled}
		Server Side Rendering: ${!serverConfigs.disableSSR}

		Server is now listening on Port ${serverConfigs.port}
		You can access it in the browser at http://${serverConfigs.host}:${
			serverConfigs.port
		}
		Press Ctrl-C to stop.



	`,
	});
});
