'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _path = require('path');

var _reactApplication = require('./middleware/reactApplication');

var _reactApplication2 = _interopRequireDefault(_reactApplication);

var _security = require('./middleware/security');

var _security2 = _interopRequireDefault(_security);

var _clientBundle = require('./middleware/clientBundle');

var _clientBundle2 = _interopRequireDefault(_clientBundle);

var _serviceWorker = require('./middleware/serviceWorker');

var _serviceWorker2 = _interopRequireDefault(_serviceWorker);

var _offlinePage = require('./middleware/offlinePage');

var _offlinePage2 = _interopRequireDefault(_offlinePage);

var _errorHandlers = require('./middleware/errorHandlers');

var _errorHandlers2 = _interopRequireDefault(_errorHandlers);

var _config = require('../config');

var _config2 = _interopRequireDefault(_config);

var _utils = require('../internal/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Create our express based server.
const app = (0, _express2.default)();

// Don't expose any software information to potential hackers.
/* eslint-disable no-console */

app.disable('x-powered-by');

// Security middlewares.
app.use(..._security2.default);

// Gzip compress the responses.
app.use((0, _compression2.default)());

// Register our service worker generated by our webpack config.
// We do not want the service worker registered for development builds, and
// additionally only want it registered if the config allows.
if (process.env.BUILD_FLAG_IS_DEV === 'false' && (0, _config2.default)('serviceWorker.enabled')) {
  app.get(`/${(0, _config2.default)('serviceWorker.fileName')}`, _serviceWorker2.default);
  app.get(`${(0, _config2.default)('bundles.client.webPath')}${(0, _config2.default)('serviceWorker.offlinePageFileName')}`, _offlinePage2.default);
}

// Configure serving of our client bundle.
app.use((0, _config2.default)('bundles.client.webPath'), _clientBundle2.default);

// Configure static serving of our "public" root http path static files.
// Note: these will be served off the root (i.e. '/') of our application.
app.use(_express2.default.static((0, _path.resolve)((0, _config2.default)('projectRootDir'), (0, _config2.default)('publicAssetsPath'))));

// The React application middleware.
app.get('*', (request, response) => {
  (0, _utils.log)({
    title: 'Request',
    level: 'special',
    message: `Received for "${request.url}"`
  });

  return (0, _reactApplication2.default)(request, response);
});

// Error Handler middlewares.
app.use(..._errorHandlers2.default);

// Create an http listener for our express app.
const listener = app.listen((0, _config2.default)('port'), () => (0, _utils.log)({
  title: 'server',
  level: 'special',
  message: `âœ“

      ${(0, _config2.default)('welcomeMessage')}

      ${(0, _config2.default)('htmlPage.defaultTitle')} is ready!

      with

      Service Workers: ${(0, _config2.default)('serviceWorker.enabled')}
      Polyfills: ${(0, _config2.default)('polyfillIO.enabled')} (${(0, _config2.default)('polyfillIO.features').join(', ')})

      Server is now listening on Port ${(0, _config2.default)('port')}
      You can access it in the browser at http://${(0, _config2.default)('host')}:${(0, _config2.default)('port')}
      Press Ctrl-C to stop.



    `
}));

// We export the listener as it will be handy for our development hot reloader,
// or for exposing a general extension layer for application customisations.
exports.default = listener;